#include "tools/codegen/core/experiments_compiler.h"

#include <fstream>
#include <set>
#include <string>

#include "test/core/test_util/test_config.h"
#include "gmock/gmock.h"
#include "gtest/gtest.h"
#include "absl/status/status.h"

namespace grpc {
namespace testing {

absl::Status ReadFile(std::string filename, std::string& output) {
  std::ifstream infile(filename);  // Open the file for reading

  if (infile.is_open()) {
    std::string line;
    // Read the file line by line (common approach)
    while (std::getline(infile, line)) {
      output += line + "\n";
    }
    infile.close();
  } else {
    return absl::InternalError("Failed to open file: " + filename);
  }
  return absl::OkStatus();
}

TEST(ExperimentsCompilerTest, GenerateGrpcGoogle3ExperimentsOutput) {
  std::set<std::string> allowed_defaults = {"true", "false"};
  std::set<std::string> allowed_platforms = {"linux", "windows", "posix"};
  std::set<std::string> final_return = {"true", "false"};
  std::set<std::string> final_define = {"GRPC_EXPERIMENTS_TEST_ROLLOUT"};

  grpc_core::ExperimentsCompiler compiler(allowed_defaults, allowed_platforms,
                                          final_return, final_define);
  ASSERT_OK(compiler.AddExperimentDefinition(
      "name: test_experiment\ndescription: test experiment\nowner: "
      "ladynana\nexpiry: 2025-01-01\nuses_polling: true\nallow_in_fuzzing_"
      "config: true\ntest_tags: [\"test_tag_1\", \"test_tag_2\"]\n"));
  ASSERT_OK(compiler.AddRolloutSpecification(
      "name: test_rollout\ndefault_value: true\n"));
  // Check the experiment definitions and rollout specifications are added
  // correctly.
  std::string filename = ::testing::SrcDir() + "experiments.h";
  EXPECT_OK(compiler.GenerateExperimentsHdr(filename, "grpc_google3"));
  std::string output;
  EXPECT_OK(ReadFile(filename, output));
  // Check output file is generated correctly.
  std::string expected_output =
      grpc_core::GetCopyright() +
      "// Auto generated by "
      "tools/codegen/core/gen_experiments_grpc_google3.cc\n" +
      "//" + grpc_core::GetGrpcCodegenPlaceholderText() + "\n";
  EXPECT_EQ(expected_output, output);
}

TEST(ExperimentsCompilerTest, GenerateGrpcOssProductionExperimentsOutput) {
  std::set<std::string> allowed_defaults = {"true", "false"};
  std::set<std::string> allowed_platforms = {"linux", "windows", "posix"};
  std::set<std::string> final_return = {"true", "false"};
  std::set<std::string> final_define = {"GRPC_EXPERIMENTS_TEST_ROLLOUT"};

  grpc_core::ExperimentsCompiler compiler(allowed_defaults, allowed_platforms,
                                          final_return, final_define);
  EXPECT_OK(compiler.AddExperimentDefinition(
      "name: test_experiment\ndescription: test experiment\nowner: "
      "ladynana\nexpiry: 2025-01-01\nuses_polling: true\nallow_in_fuzzing_"
      "config: true\ntest_tags: [\"test_tag_1\", \"test_tag_2\"]\n"));
  EXPECT_OK(compiler.AddRolloutSpecification(
      "name: test_rollout\ndefault_value: true\n"));
  // Check the experiment definitions and rollout specifications are added
  // correctly.
  std::string filename = ::testing::SrcDir() + "experiments.h";
  EXPECT_OK(compiler.GenerateExperimentsHdr(filename, "grpc_oss_production"));
  std::string output;
  EXPECT_OK(ReadFile(filename, output));
  // Check output file is generated correctly.
  std::string expected_output =
      grpc_core::GetCopyright() +
      "// Auto generated by "
      "tools/codegen/core/gen_experiments_grpc_oss.cc\n" +
      "//" + grpc_core::GetGrpcCodegenPlaceholderText() + "\n";
  EXPECT_EQ(expected_output, output);
}

TEST(ExperimentsCompilerTest, GenerateGrpcOssTestExperimentsOutput) {
  std::set<std::string> allowed_defaults = {"true", "false"};
  std::set<std::string> allowed_platforms = {"linux", "windows", "posix"};
  std::set<std::string> final_return = {"true", "false"};
  std::set<std::string> final_define = {"GRPC_EXPERIMENTS_TEST_ROLLOUT"};
  grpc_core::ExperimentsCompiler compiler(allowed_defaults, allowed_platforms,
                                          final_return, final_define);
  EXPECT_OK(compiler.AddExperimentDefinition(
      "name: test_experiment\ndescription: test experiment\nowner: "
      "ladynana\nexpiry: 2025-01-01\nuses_polling: true\nallow_in_fuzzing_"
      "config: true\ntest_tags: [\"test_tag_1\", \"test_tag_2\"]\n"));
  EXPECT_OK(compiler.AddRolloutSpecification(
      "name: test_rollout\ndefault_value: true\n"));
  // Check the experiment definitions and rollout specifications are added
  // correctly.
  std::string filename = ::testing::SrcDir() + "experiments.h";
  EXPECT_OK(compiler.GenerateExperimentsHdr(filename, "grpc_oss_test"));
  std::string output;
  EXPECT_OK(ReadFile(filename, output));
  // Check output file is generated correctly.
  std::string expected_output =
      grpc_core::GetCopyright() +
      "// Auto generated by "
      "tools/codegen/core/gen_experiments_grpc_oss.cc\n" +
      "//" + grpc_core::GetGrpcCodegenPlaceholderText() + "\n";
  EXPECT_EQ(expected_output, output);
}
}  // namespace testing
}  // namespace grpc

int main(int argc, char** argv) {
  grpc::testing::TestEnvironment env(&argc, argv);
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
